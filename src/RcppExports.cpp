// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// compute_all
Rcpp::List compute_all(Rcpp::List& tree_list, int fs, int max_depth, int nb_class, int nb_trees_per_class, float thresh_dec);
RcppExport SEXP _cmbdtc_compute_all(SEXP tree_listSEXP, SEXP fsSEXP, SEXP max_depthSEXP, SEXP nb_classSEXP, SEXP nb_trees_per_classSEXP, SEXP thresh_decSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type tree_list(tree_listSEXP);
    Rcpp::traits::input_parameter< int >::type fs(fsSEXP);
    Rcpp::traits::input_parameter< int >::type max_depth(max_depthSEXP);
    Rcpp::traits::input_parameter< int >::type nb_class(nb_classSEXP);
    Rcpp::traits::input_parameter< int >::type nb_trees_per_class(nb_trees_per_classSEXP);
    Rcpp::traits::input_parameter< float >::type thresh_dec(thresh_decSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_all(tree_list, fs, max_depth, nb_class, nb_trees_per_class, thresh_dec));
    return rcpp_result_gen;
END_RCPP
}
// predict_model
arma::mat predict_model(const arma::mat& data2predict, Rcpp::List& tree_list, int max_depth, int nb_class, int nb_trees_per_class, float thresh_dec, const std::string model_type);
RcppExport SEXP _cmbdtc_predict_model(SEXP data2predictSEXP, SEXP tree_listSEXP, SEXP max_depthSEXP, SEXP nb_classSEXP, SEXP nb_trees_per_classSEXP, SEXP thresh_decSEXP, SEXP model_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data2predict(data2predictSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type tree_list(tree_listSEXP);
    Rcpp::traits::input_parameter< int >::type max_depth(max_depthSEXP);
    Rcpp::traits::input_parameter< int >::type nb_class(nb_classSEXP);
    Rcpp::traits::input_parameter< int >::type nb_trees_per_class(nb_trees_per_classSEXP);
    Rcpp::traits::input_parameter< float >::type thresh_dec(thresh_decSEXP);
    Rcpp::traits::input_parameter< const std::string >::type model_type(model_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_model(data2predict, tree_list, max_depth, nb_class, nb_trees_per_class, thresh_dec, model_type));
    return rcpp_result_gen;
END_RCPP
}
// CF_find
Rcpp::List CF_find(arma::vec& query, int predicted_class, int target_class, Rcpp::List& tree_list, int max_depth, int nb_class, int nb_trees_per_class, float thresh_dec, float sup_d2query_dataset, int budget, int max_dim_width_first, bool check_has_target, bool update_sup_bound, const std::string model_type);
RcppExport SEXP _cmbdtc_CF_find(SEXP querySEXP, SEXP predicted_classSEXP, SEXP target_classSEXP, SEXP tree_listSEXP, SEXP max_depthSEXP, SEXP nb_classSEXP, SEXP nb_trees_per_classSEXP, SEXP thresh_decSEXP, SEXP sup_d2query_datasetSEXP, SEXP budgetSEXP, SEXP max_dim_width_firstSEXP, SEXP check_has_targetSEXP, SEXP update_sup_boundSEXP, SEXP model_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type query(querySEXP);
    Rcpp::traits::input_parameter< int >::type predicted_class(predicted_classSEXP);
    Rcpp::traits::input_parameter< int >::type target_class(target_classSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type tree_list(tree_listSEXP);
    Rcpp::traits::input_parameter< int >::type max_depth(max_depthSEXP);
    Rcpp::traits::input_parameter< int >::type nb_class(nb_classSEXP);
    Rcpp::traits::input_parameter< int >::type nb_trees_per_class(nb_trees_per_classSEXP);
    Rcpp::traits::input_parameter< float >::type thresh_dec(thresh_decSEXP);
    Rcpp::traits::input_parameter< float >::type sup_d2query_dataset(sup_d2query_datasetSEXP);
    Rcpp::traits::input_parameter< int >::type budget(budgetSEXP);
    Rcpp::traits::input_parameter< int >::type max_dim_width_first(max_dim_width_firstSEXP);
    Rcpp::traits::input_parameter< bool >::type check_has_target(check_has_targetSEXP);
    Rcpp::traits::input_parameter< bool >::type update_sup_bound(update_sup_boundSEXP);
    Rcpp::traits::input_parameter< const std::string >::type model_type(model_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(CF_find(query, predicted_class, target_class, tree_list, max_depth, nb_class, nb_trees_per_class, thresh_dec, sup_d2query_dataset, budget, max_dim_width_first, check_has_target, update_sup_bound, model_type));
    return rcpp_result_gen;
END_RCPP
}
// CF_find_with_mask
Rcpp::List CF_find_with_mask(arma::vec& query, int predicted_class, int target_class, arma::vec& mask_fixed_features, Rcpp::List& tree_list, int max_depth, int nb_class, int nb_trees_per_class, float thresh_dec, float masked_sup_d2query_dataset, int budget, int max_dim_width_first, bool check_has_target, bool update_sup_bound, const std::string model_type);
RcppExport SEXP _cmbdtc_CF_find_with_mask(SEXP querySEXP, SEXP predicted_classSEXP, SEXP target_classSEXP, SEXP mask_fixed_featuresSEXP, SEXP tree_listSEXP, SEXP max_depthSEXP, SEXP nb_classSEXP, SEXP nb_trees_per_classSEXP, SEXP thresh_decSEXP, SEXP masked_sup_d2query_datasetSEXP, SEXP budgetSEXP, SEXP max_dim_width_firstSEXP, SEXP check_has_targetSEXP, SEXP update_sup_boundSEXP, SEXP model_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type query(querySEXP);
    Rcpp::traits::input_parameter< int >::type predicted_class(predicted_classSEXP);
    Rcpp::traits::input_parameter< int >::type target_class(target_classSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mask_fixed_features(mask_fixed_featuresSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type tree_list(tree_listSEXP);
    Rcpp::traits::input_parameter< int >::type max_depth(max_depthSEXP);
    Rcpp::traits::input_parameter< int >::type nb_class(nb_classSEXP);
    Rcpp::traits::input_parameter< int >::type nb_trees_per_class(nb_trees_per_classSEXP);
    Rcpp::traits::input_parameter< float >::type thresh_dec(thresh_decSEXP);
    Rcpp::traits::input_parameter< float >::type masked_sup_d2query_dataset(masked_sup_d2query_datasetSEXP);
    Rcpp::traits::input_parameter< int >::type budget(budgetSEXP);
    Rcpp::traits::input_parameter< int >::type max_dim_width_first(max_dim_width_firstSEXP);
    Rcpp::traits::input_parameter< bool >::type check_has_target(check_has_targetSEXP);
    Rcpp::traits::input_parameter< bool >::type update_sup_bound(update_sup_boundSEXP);
    Rcpp::traits::input_parameter< const std::string >::type model_type(model_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(CF_find_with_mask(query, predicted_class, target_class, mask_fixed_features, tree_list, max_depth, nb_class, nb_trees_per_class, thresh_dec, masked_sup_d2query_dataset, budget, max_dim_width_first, check_has_target, update_sup_bound, model_type));
    return rcpp_result_gen;
END_RCPP
}
// CF_find_regression
Rcpp::List CF_find_regression(arma::vec& query, arma::vec& target_interval, Rcpp::List& tree_list, int max_depth, int nb_trees, float sup_d2query_dataset, int budget, int max_dim_width_first, bool check_has_target, bool update_sup_bound, const std::string model_type);
RcppExport SEXP _cmbdtc_CF_find_regression(SEXP querySEXP, SEXP target_intervalSEXP, SEXP tree_listSEXP, SEXP max_depthSEXP, SEXP nb_treesSEXP, SEXP sup_d2query_datasetSEXP, SEXP budgetSEXP, SEXP max_dim_width_firstSEXP, SEXP check_has_targetSEXP, SEXP update_sup_boundSEXP, SEXP model_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type query(querySEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type target_interval(target_intervalSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type tree_list(tree_listSEXP);
    Rcpp::traits::input_parameter< int >::type max_depth(max_depthSEXP);
    Rcpp::traits::input_parameter< int >::type nb_trees(nb_treesSEXP);
    Rcpp::traits::input_parameter< float >::type sup_d2query_dataset(sup_d2query_datasetSEXP);
    Rcpp::traits::input_parameter< int >::type budget(budgetSEXP);
    Rcpp::traits::input_parameter< int >::type max_dim_width_first(max_dim_width_firstSEXP);
    Rcpp::traits::input_parameter< bool >::type check_has_target(check_has_targetSEXP);
    Rcpp::traits::input_parameter< bool >::type update_sup_bound(update_sup_boundSEXP);
    Rcpp::traits::input_parameter< const std::string >::type model_type(model_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(CF_find_regression(query, target_interval, tree_list, max_depth, nb_trees, sup_d2query_dataset, budget, max_dim_width_first, check_has_target, update_sup_bound, model_type));
    return rcpp_result_gen;
END_RCPP
}
// CF_find_with_mask_regression
Rcpp::List CF_find_with_mask_regression(arma::vec& query, arma::vec& target_interval, arma::vec& mask_fixed_features, Rcpp::List& tree_list, int max_depth, int nb_trees, float masked_sup_d2query_dataset, int budget, int max_dim_width_first, bool check_has_target, bool update_sup_bound, const std::string model_type);
RcppExport SEXP _cmbdtc_CF_find_with_mask_regression(SEXP querySEXP, SEXP target_intervalSEXP, SEXP mask_fixed_featuresSEXP, SEXP tree_listSEXP, SEXP max_depthSEXP, SEXP nb_treesSEXP, SEXP masked_sup_d2query_datasetSEXP, SEXP budgetSEXP, SEXP max_dim_width_firstSEXP, SEXP check_has_targetSEXP, SEXP update_sup_boundSEXP, SEXP model_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type query(querySEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type target_interval(target_intervalSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mask_fixed_features(mask_fixed_featuresSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type tree_list(tree_listSEXP);
    Rcpp::traits::input_parameter< int >::type max_depth(max_depthSEXP);
    Rcpp::traits::input_parameter< int >::type nb_trees(nb_treesSEXP);
    Rcpp::traits::input_parameter< float >::type masked_sup_d2query_dataset(masked_sup_d2query_datasetSEXP);
    Rcpp::traits::input_parameter< int >::type budget(budgetSEXP);
    Rcpp::traits::input_parameter< int >::type max_dim_width_first(max_dim_width_firstSEXP);
    Rcpp::traits::input_parameter< bool >::type check_has_target(check_has_targetSEXP);
    Rcpp::traits::input_parameter< bool >::type update_sup_bound(update_sup_boundSEXP);
    Rcpp::traits::input_parameter< const std::string >::type model_type(model_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(CF_find_with_mask_regression(query, target_interval, mask_fixed_features, tree_list, max_depth, nb_trees, masked_sup_d2query_dataset, budget, max_dim_width_first, check_has_target, update_sup_bound, model_type));
    return rcpp_result_gen;
END_RCPP
}
// CF_find_surrogate
Rcpp::List CF_find_surrogate(const arma::vec& query, const float target, Rcpp::List& tree_list, int max_depth, int nb_class, int nb_trees_per_class, float thresh_dec, float sigma, int Niter, float lr, float lambda_distortion, const std::string model_type, const std::string optim_crit);
RcppExport SEXP _cmbdtc_CF_find_surrogate(SEXP querySEXP, SEXP targetSEXP, SEXP tree_listSEXP, SEXP max_depthSEXP, SEXP nb_classSEXP, SEXP nb_trees_per_classSEXP, SEXP thresh_decSEXP, SEXP sigmaSEXP, SEXP NiterSEXP, SEXP lrSEXP, SEXP lambda_distortionSEXP, SEXP model_typeSEXP, SEXP optim_critSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type query(querySEXP);
    Rcpp::traits::input_parameter< const float >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type tree_list(tree_listSEXP);
    Rcpp::traits::input_parameter< int >::type max_depth(max_depthSEXP);
    Rcpp::traits::input_parameter< int >::type nb_class(nb_classSEXP);
    Rcpp::traits::input_parameter< int >::type nb_trees_per_class(nb_trees_per_classSEXP);
    Rcpp::traits::input_parameter< float >::type thresh_dec(thresh_decSEXP);
    Rcpp::traits::input_parameter< float >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type Niter(NiterSEXP);
    Rcpp::traits::input_parameter< float >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< float >::type lambda_distortion(lambda_distortionSEXP);
    Rcpp::traits::input_parameter< const std::string >::type model_type(model_typeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type optim_crit(optim_critSEXP);
    rcpp_result_gen = Rcpp::wrap(CF_find_surrogate(query, target, tree_list, max_depth, nb_class, nb_trees_per_class, thresh_dec, sigma, Niter, lr, lambda_distortion, model_type, optim_crit));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cmbdtc_compute_all", (DL_FUNC) &_cmbdtc_compute_all, 6},
    {"_cmbdtc_predict_model", (DL_FUNC) &_cmbdtc_predict_model, 7},
    {"_cmbdtc_CF_find", (DL_FUNC) &_cmbdtc_CF_find, 14},
    {"_cmbdtc_CF_find_with_mask", (DL_FUNC) &_cmbdtc_CF_find_with_mask, 15},
    {"_cmbdtc_CF_find_regression", (DL_FUNC) &_cmbdtc_CF_find_regression, 11},
    {"_cmbdtc_CF_find_with_mask_regression", (DL_FUNC) &_cmbdtc_CF_find_with_mask_regression, 12},
    {"_cmbdtc_CF_find_surrogate", (DL_FUNC) &_cmbdtc_CF_find_surrogate, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_cmbdtc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
